version: "3"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    #volumes:
      #- /docker-data/zookeeper:/var/lib/zookeeper/data
      #- /docker-data/zookeeper/log:/var/lib/zookeeper/log
    restart: always

  kafka1:
    image: confluentinc/cp-kafka:6.1.1
    hostname: kafka1
    container_name: kafka1
    ports:
      - "19092:19092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # kafka 1ea
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_LOG_RETENTION_HOURS: 24
    #volumes:
      #- /docker-data/kafka1:/var/lib/kafka/data
    depends_on:
      - zookeeper
    restart: always

#  kafka-manager:
#    image: hlebalbau/kafka-manager:stable
#    container_name: kafka-manager
#    ports:
#      - "9999:9000"
#    environment:
#      ZK_HOSTS: "zookeeper:2181"
#      APPLICATION_SECRET: "random-secret"
#    command: -Dpidfile.path=/dev/null
#    links:
#      - zookeeper:zookeeper
#    depends_on:
#      - zookeeper
#      - kafka1



# docker-compose 기본 네트워크가 아닌 미리 생성해둔 외부 네트워크에 연결
# docker network ls
# docker network create my-net
# docker network inspect my-net
networks:
  default:
    external:
      name: my-net

# docker-compose -f dc-kafka.yml up -d
# docker-compose -f dc-kafka.yml down
